'''
Created on Nov 25, 2013
@author: elius

Edited by: Ori Ashur
03.01.2015
'''


from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
import sqlite3
import glob
import os
import time


local_image_dir = r".\data\images\\"
local_crops_dir = r".\data\crops\\"
local_xml_dir   = r".\data\xml\\"
local_db_dir    = r".\data\\"

PORT_NUMBER = 8080 #port for the local DB server

   
def genxml():
    """
    Returns xml (string) for first non-handled image, by the GUI.
    Uses the local sql DB to determine what image wasn't handled
    and reads the xml string from the appropriate
    xml file (which was generated by grab.py)
    """
    con = sqlite3.connect(local_db_dir + "auvsi.db")
    cur = con.cursor()
    
    sql = 'SELECT * FROM xmls WHERE status = "false" ORDER BY id asc LIMIT 1'
    cur.execute(sql)
    row = cur.fetchall()
    if len(row) == 0:
        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><AUVSI></AUVSI>"
    
    f = open(row[0][2], 'r')
    out = f.read()
    f.close()
    
    sql = "UPDATE xmls SET status = 'sent' WHERE id = {}".format(row[0][0]) 
    cur.execute(sql)
    con.commit()
    con.close()   
    return out

def reset_entries():
    """ Sets all entries on local sql db to un-handled status. """
    con = sqlite3.connect(local_db_dir + "auvsi.db")
    cur = con.cursor()
    sql = "UPDATE xmls SET status = 'false'"
    cur.execute(sql)
    con.commit()
    con.close()
    print "Reseted entries"
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><AUVSI reset=\"true\"></AUVSI>"

def truncateDB():
    """ Removes all entries from the local DB by dropping the table and re-creating it. """
    con = sqlite3.connect(local_db_dir + "auvsi.db")
    cur = con.cursor()
    sql = "DROP TABLE xmls"
    try:
        cur.execute(sql)
        con.commit()
    except sqlite3.OperationalError:
        pass
    
    sql = "CREATE TABLE xmls (id INTEGER PRIMARY KEY, status TEXT, src TEXT)"
    cur.execute(sql)
    con.close()
    print "Truncated and re-created DB\n"
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><AUVSI truncate=\"true\"></AUVSI>" 

def delAll():
    """" Removes all files and wipe local DB (drop table and re-create it) """
    files = glob.glob(local_xml_dir + "*") + glob.glob(local_image_dir + "*") + glob.glob(local_crops_dir + "*")
    #print type(files)
    for f in files:
        print "Removing: {}".format(f)
        os.remove(f)
    truncateDB()
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><AUVSI delete=\"true\"></AUVSI>"  

class myHandler(BaseHTTPRequestHandler):
    """
    Handles the GET requests for the server.
    The GET requests are coming from the C-sharp GUI.
    This function should send back the content of the requested xml,
    give option to wipe local DB and to reset it.
    the "handled status" of the images.
    """
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type','text/xml')
        self.end_headers()
        
        try:
            if self.path == "/?action=reset":
                output = reset_entries()
            elif self.path == "/?action=truncate":
                output = truncateDB()
            elif self.path == "/?action=delete":
                output = delAll()
            else:
                output = genxml()

        except sqlite3.OperationalError as e:
            print "DB Error: \n{}".format(e.message)
            if e.message == 'no such table: xmls': output = truncateDB()
        
        self.wfile.write(output)
        
        return

try:
    delAll()
    print "deleted"
    time.sleep(15)
    server = HTTPServer(('', PORT_NUMBER), myHandler)
    print 'Started httpserver on port ' , PORT_NUMBER  
    server.serve_forever()

except KeyboardInterrupt:
    print '^C received, shutting down the web server'
    server.socket.close()
    